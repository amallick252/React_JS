> install @reduxjs/toolkit, @tinymce/tinymce-react, appwrite, html-react-parser, react, react-dom, react-hook-form, react-redux, react-router-dom, 
> create .env file in src, add it to gitignore, add VITE_APPWRITE_URL, VITE_APPWRITE_PROJECT_ID, VITE_APPWRITE_DATABASE_ID, VITE_APPWRITE_COLLECTION_ID, VITE_APPWRITE_BUCKET_ID
> create conf/conf.js in src, add
const conf={
    apperiteURL: String(import.meta.env.VITE_APPWRITE_URL),
    apperiteProjectId: String(import.meta.env.VITE_PROJECT_ID),
    apperiteDatabaseId: String(import.meta.env.VITE_APPWRITE_DATABASE_ID),
    apperiteCollectionId: String(import.meta.env.VITE_APPWRITE_COLLECTION_ID),
    apperiteBucketId: String(import.meta.env.VITE_APPWRITE_BUCKET_ID),

}

export default conf
-----------------------------
> create appwrite/auth.js (this will have services, for easier migration from DB)
> import conf from conf.js
> create classes, constructer, async await functions for createAccount, login, logout, getcurrentuser

import { Client, Account, ID } from "appwrite";
import conf from "../conf/conf.js";

export class AuthService{
    client = new Client();// client is not a variable, but a property of instance of AuthService
    account;// not providing new Account, as we have to first set the end point, setProject|| we are not creating sets in the client here, because it will take up a lot of memory from begining, we want when a new authService is made we have to do the sets 

    constructor(){
        this.client
            .setEndpoint(conf.apperiteURL)
            .setProject(conf.apperiteProjectId);
        this.account = new Account(this.client);
    }

    async createAccount({email, password, name}){
        try {
            const userAccount = await this.account.create(ID.unique(),email,password,name)
            if(userAccount){
                //call another method(directly log the user in)
                return this.login({email,password});
            }else{
                return userAccount;
            }
            
        } catch (error) {
            throw error;
        }
    }

    async login({email,password}){
        try {
            return await this.account.createEmailSession(email,password);
        } catch (error) {
            throw error;
        }
    }

    async getCurrentUser(){
        try {
            return await this.account.get(); 
        } catch (error) {
            console.log("Appwrite service:: getCurrentUser::error", error);
        }

        return null;
    }

    async logout(){
        try {
            await this.account.deleteSessions();
        } catch (error) {
            throw error;
        }
    }
}

const authService = new AuthService()// creating an object for user where user can use the constructer and methods
export default authService

------------------------------
> create appwrite/config.js
> import conf from conf.js
> create classes, constructer, async await functions for createPost, delete, update, getPost/s, upload/deleteFile, getFilePreview

import { Client, ID, Databases, Storage, Query } from "appwrite";
import conf from "../conf/conf.js";

export class Service{
    client = new Client();
    databases;
    bucket;

    constructor(){
        this.client
            .setEndpoint(conf.apperiteURL)
            .setProject(conf.apperiteProjectId);
        this.databases = new Databases(this.client);
        this.bucket = new Storage(this.client)
    }

    async createPost({title, slug, content, featuredImage, status, userId}){
        try {
            await this.databases.createDocument(
                conf.apperiteDatabaseId,
                conf.apperiteCollectionId,
                slug,
                {
                    title,
                    content,
                    featuredImage,
                    status,
                    userId
                }
            )
        } catch (error) {
            console.log("Appwrite serive :: createPost :: error", error);
        }
    }

    async updatePost(slug,{title, content, featuredImage,status}){// user id will be directly provided from post
        try {
            return await this.databases.updateDocument(
                conf.apperiteDatabaseId,
                conf.apperiteCollectionId,
                slug,
                {
                    title,
                    content,
                    featuredImage,
                    status
                }
            )
        } catch (error) {
            console.log("Appwrite serive :: updatePost :: error", error);   
        }
    }

    async deletePost(slug){
        try {
            await this.databases.deleteDocument(
                conf.apperiteDatabaseId,
                conf.apperiteCollectionId,
                slug
            )
            return true
        } catch (error) {
            console.log("Appwrite serive :: deletePost :: error", error);
            return false
        }
    }

    async getPost(slug){
        try {
            return await this.databases.getDocument(
                conf.apperiteDatabaseId,
                conf.apperiteCollectionId,
                slug
            )
        } catch (error) {
            console.log("Appwrite serive :: getPost :: error", error);
            return false
        }
    }

    async getPosts(queries = [Query.equal("status","active" )]){
        try {
            return await this.databases.listDocuments(
                conf.apperiteDatabaseId,
                conf.apperiteCollectionId,
                queries
            )
        } catch (error) {
            console.log("Appwrite serive :: getPosts :: error", error);
            return false 
        }
    }

    //File upload services

    async uploadFile(file){
        try {
            return await this.bucket.createFile(
                conf.apperiteBucketId,
                ID.unique(),
                file
            )
        } catch (error) {
            console.log("Appwrite serive :: uploadFile :: error", error);
            return false 
        }
    }

    async deleteFile(fileId){
        try {
            await this.bucket.deleteFile(
                conf.apperiteBucketId,
                fileId
            )
            return true
        } catch (error) {
            console.log("Appwrite serive :: deleteFile :: error", error);
            return false
        }
    }

    getFilePreview(fileId){
        return this.bucket.getFilePreview(
            conf.apperiteBucketId,
            fileId
        )
    }
}

const service = new Service()
export default service

------------------------------
>create src/store/store.js //store(@reduxjs)
>create src/store/authSlics.js //State slice for asking store if user is loggedin or not
(@reduxjs) it will requir intial state, then name, initial state, reducers

> 


making componets
Header, footer, index.js
Container, LogoutBtn, Logo
button, Input, 
Vid_23_Select, PostCard, Login, Signup

issues to resolve in PostCard.jsx: import appwriteService instead of service 
(there is another component which imports config that might have import bugs)

